#ifndef EXT_EXPLODE_
#define EXT_EXPLODE_

/* EXT C++ Library
// explode; splits string by substring into a vector
//
// Author: Jan Ringos, jan@ringos.cz
*/

#include <string>
#include <vector>
#include <algorithm>

namespace ext {
    namespace detail {
        
        // explode_expectation
        //  - efficiency detail
        
        template <typename T, typename U>
        std::size_t explode_expectation (const T & s, const U & m) {
            return 2u;
        };
        
        // TODO: basic_string_view

        template <typename C>
        std::size_t explode_expectation (const std::basic_string <C> & s, const C & m) {
            return std::count (s.begin (), s.end (), m) + 1u;
        };

        template <typename C>
        std::size_t explode_expectation (const std::basic_string <C> & s, const std::basic_string <C> & m) {
            typename std::basic_string <C> ::size_type n = 1;
            typename std::basic_string <C> ::size_type i = -1;
            
            // while ((i = s.find (m, i) + 1u) != 0) {
            while ((i = s.find (m, i + 1u)) != std::basic_string <C> ::npos) {
                ++n;
            };
            
            return n;
        };

    };
    
    template <typename T, typename U>
    std::vector <T> explode (const T & s, const U & m) {
        std::vector <T> r;
        r.reserve (ext::detail::explode_expectation (s, m));
        
        typename T::size_type ob = 0u;
        typename T::size_type oe = 0u;
        
        while ((oe = s.find (m, ob)) != T::npos) {
            r.push_back (s.substr (ob, oe - ob));
            ob = oe + 1;
        };
        r.push_back (s.substr (ob));
        return r;
    };
};

#endif
