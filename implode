#ifndef EXT_IMPLODE_
#define EXT_IMPLODE_

/* EXT C++ Library
// using += operator concatenates non-empty elements of a vector inserting
// separator between elements
//
// Author: Jan Ringos, jan@ringos.cz
//
// Example:
//    std::vector <std::string> in = { "", "", "AA", "", "BB", "CC, "" };
//    assert (ext::implode (in, ", ") == "AA, BB, CC");
*/

#include <iterator>

namespace ext {

    // implode
    //  - concatenates (+=) non-empty elements in a container into single element
    //  - second parameter specifies separator
    //  - TODO: other containers? raw arrays? using ranges?

    template <typename Item, typename Iterator, typename Separator>
    Item implode (Iterator i, Iterator e, Separator s) {
        Item r;
        // r.reserve (...);

        for (; i != e; ++i)
            if (!i->empty ()) {
                r = *i++;
                break;
            };

        for (; i != e; ++i)
            if (!i->empty ()) {
                r += s;
                r += *i;
            };

        return r;
    };

    template <typename T, typename U>
    typename T::value_type implode (const T & s, const U & m = typename T::value_type ()) {
        return implode <T::value_type> (std::begin (s), std::end (s), m);
    };

    template <typename T, std::size_t N, typename U>
    T implode (T (&s) [N], const U & m = T ()) {
        return implode <T> (std::begin (s), std::end (s), m);
    };

};

#endif
