#ifndef EXT_TRANSITION_
#define EXT_TRANSITION_

/* EXT C++ Library
// using linear interpolation and given X value computes Y value on a chart
// described by sorted list of [X,Y] coordinates
//
// Author: Jan Ringos, jan@ringos.cz
//
// Supports computing transition in:
//  - classic arrays of known bound
//  - std::array, std::tupple and std::pair (anything that overloads std::get)
// 
// NOTE: The XN-th (usually on index zero) column must be sorted!
//
// Example:
//    const std::pair <float, float> glowing [] = {
//        { 0.0f, 0.0f },
//        { 0.7f, 0.2f },
//        { 1.1f, 1.0f },
//        { 1.8f, 1.0f },
//        { 2.0f, 0.0f },
//    };
//    glow = ext::transition (glowing, time);
//
// Example:
//    const std::array <float, 4> colorization [] = {
//        { 0.0f, 0.0f, 0.0f, 0.0f },
//        { 0.5f, 1.0f, 0.7f, 0.5f },
//        { 1.0f, 1.0f, 1.0f, 1.0f },
//        { 2.0f, 0.0f, 0.2f, 1.0f },
//    };
//    r = ext::transition <0, 1> (colorization, time);
//    g = ext::transition <0, 2> (colorization, time);
//    b = ext::transition <0, 3> (colorization, time);
*/

#include <array>
#include <tuple>
#include <utility>
#include <algorithm>
#include "interpolation"

namespace ext {
    
    // transition
    //  - computes Y transition from range of iterators to pairs/tupples/arrays
    //    where X values are stored in XN-th (first by default) member

    template <typename T, std::size_t XN = 0, std::size_t YN = 1, typename I>
    typename std::tuple_element <YN, T> ::type
    transition (I b, I e,
                const typename std::tuple_element <XN, T> ::type & k) {
        
        const auto z = std::upper_bound (b, e, k,
                                         [](const typename std::tuple_element <XN, T> ::type & kk, const T & v) {
                                            return kk < std::get <XN> (v);
                                         });
        if (z == b)
            return std::get <YN> (*b);
        if (z == e)
            return std::get <YN> (*(e - 1));
        
        const auto y = z - 1;
        return ext::interpolation <typename std::tuple_element <XN, T> ::type,
                                   typename std::tuple_element <YN, T> ::type>
                                  (std::get <XN> (*y), std::get <XN> (*z),
                                   std::get <YN> (*y), std::get <YN> (*z)) (k);
    };
    
    // transition
    //  - this version works over static array of pairs/tupples/arrays
    
    template <std::size_t XN = 0, std::size_t YN = 1,
              typename T, std::size_t N>
    typename std::tuple_element <YN, T> ::type
    transition (const T (&data) [N],
                const typename std::tuple_element <XN, T> ::type & k) {
        
        return ext::transition <T, XN, YN> (std::begin (data), std::end (data), k);
    };
};

#endif
